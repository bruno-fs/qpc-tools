---

- name: Set server directory
  set_fact:
    server_install_dir: "{{ ansible_env['SERVER_DIR'] | default(ansible_env['HOME'] + '/quipucords') }}"
  when: server_install_dir is not defined

- name: Validate use_supervisord is set to true or false
  fail:
    msg: "{{ use_supervisord }} is invalid value for use_supervisord.  Must be equal to true or false"
  when:
    - not use_supervisord|lower == 'true'
    - not use_supervisord|lower == 'false'

- name: Validate open_port is set to true or false
  fail:
    msg: "{{ open_port }} is invalid value for open_port.  Must be equal to true or false"
  when:
    - not open_port|lower == 'true'
    - not open_port|lower == 'false'

- name: Open port in firewall on host machine for Quipucords server
  iptables:
    chain: INPUT
    destination_port: "{{ server_port }}"
    protocol: tcp
    jump: ACCEPT
  become: true
  ignore_errors: yes
  when:
    - open_port



- name: Set the server version to install using user argument
  set_fact:
    install_flag_server_version: "{{ server_version }}"
  when:
    - server_version is defined

- name: Set the server docker image tag to user specified version
  set_fact:
    server_image_tag: "{{ install_flag_server_version }}"
  when:
    - install_flag_server_version is defined

- name: Default the server docker tag to unknown
  set_fact:
    server_image_tag: "unknown"
  when:
    - install_flag_server_version is not defined

- name: Query GitHub for the latest release information
  uri:
    url: https://api.github.com/repos/quipucords/quipucords/releases/latest
    validate_certs: no
    return_content: yes
    headers:
      Content-Type: "application/json"
    body_format: json
  retries: 5
  delay: 5
  register: github_release_info
  until: github_release_info.status == 200 or github_release_info.status == 401
  changed_when: false
  when:
    - install_flag_server_version is not defined

- name: Parse release tag from github JSON
  set_fact:
    github_release: "{{ github_release_info.json.tag_name }}"
  when:
    - install_flag_server_version is not defined
    - github_release_info is defined
    - github_release_info.json is defined
    - github_release_info.json.tag_name is defined

- name: Override default server_image_tag value with release value
  set_fact:
    server_image_tag: "{{ github_release }}"
  when:
    - install_flag_server_version is not defined
    - github_release is defined

- name: Set the Quipucords release server image file name
  set_fact:
    github_server_filename: "quipucords_server_image.tar.gz"

- name: Set the Quipucords release server image file name
  set_fact:
    release_cache_server_filename: "quipucords.{{ server_image_tag }}.tar.gz"

- name: Set server docker image name
  set_fact:
    server_docker_image_name: "quipucords"

- name: Set Quipucords docker image and tag
  set_fact:
    server_image_and_tag: "{{server_docker_image_name}}:{{server_image_tag}}"
  when: server_image_and_tag is not defined

- name: Default directory mounting to empty string
  set_fact:
    dir_mount_selinux: ""

- name: Set dir_mount_selinux to add ":z" if selinux_on is true
  set_fact:
    dir_mount_selinux: ":z"
  when: selinux_on

- name: Check for Quipucords server docker image presence
  shell: docker images | grep "{{ server_docker_image_name }}" | grep "{{ server_image_tag }}"
  become: true
  register: quipucords_docker_image_raw
  ignore_errors: yes

- name: Check for Postgres docker image presence
  shell: docker images | grep postgres | grep "{{ POSTGRES_VERSION }}"
  become: true
  register: postgres_docker_image_raw
  ignore_errors: yes

- name: Set Quipucords docker image presence to false
  set_fact:
    quipucords_docker_image_present: false
  when:
    - quipucords_docker_image_raw.rc != 0

- name: Set Postgres docker image presence to false
  set_fact:
    postgres_docker_image_present: false
  when:
    - postgres_docker_image_raw.rc != 0

- name: Set Quipucords docker image presence to true if output is not empty
  set_fact:
    quipucords_docker_image_present: "{{ quipucords_docker_image_raw['stdout_lines']|length > 0 }}"
  when:
    - server_image_tag != 'unknown'
    - quipucords_docker_image_raw.rc == 0
    - "'stdout_lines' in quipucords_docker_image_raw"

- name: Set Postgres docker image presence to true if output is not empty
  set_fact:
    postgres_docker_image_present: "{{ postgres_docker_image_raw['stdout_lines']|length > 0 }}"
  when:
    - postgres_docker_image_raw.rc == 0
    - "'stdout_lines' in postgres_docker_image_raw"

- name: Set path to local Quipucords docker image tar.gz
  set_fact:
    qpc_server_local_path: "{{ pkg_install_dir }}{{ release_cache_server_filename }}"
  when: qpc_server_local_path is not defined

- name: Set path to local Postgres docker image tar
  set_fact:
    postgres_image_local_path: "{{ pkg_install_dir }}postgres.{{POSTGRES_VERSION}}.tar"
  when:
    - postgres_image_local_path is not defined

- name: Rename Quipucords server docker image to version specific cache name (offline install)
  command: cp -f "{{ pkg_install_dir }}{{ github_server_filename }}" "{{qpc_server_local_path}}"
  when:
    - install_offline|lower == 'true'
    - not quipucords_docker_image_present

- name: Check if local server docker image tar.gz exists
  stat:
    path: "{{qpc_server_local_path}}"
  register: find_qpc_server_local

- name: Check if local Postgres docker image tar exists
  stat:
    path: "{{postgres_image_local_path}}"
  register: find_postgres_local_image

- name: Create local packages directory if it does not exist
  shell: mkdir -p "{{ pkg_install_dir }}"
  when:
    - find_qpc_server_local.stat.exists == false
    - not quipucords_docker_image_present

- name: Set the version specific GitHub base URL for the Quipucords server image tar.gz
  set_fact:
    server_github_release_url: "https://github.com/quipucords/quipucords/releases/download/{{ install_flag_server_version }}"
  when:
    - find_qpc_server_local.stat.exists == false
    - not quipucords_docker_image_present
    - install_flag_server_version is defined

- name: Set the default GitHub base URL for the Quipucords server image tar.gz
  set_fact:
    server_github_release_url: "https://github.com/quipucords/quipucords/releases/latest/download"
  when:
    - find_qpc_server_local.stat.exists == false
    - not quipucords_docker_image_present
    - install_flag_server_version is not defined

- name: Set server container image tar.gz download URL
  set_fact:
    quipucords_server_container_image_url: "{{ server_github_release_url }}/{{ github_server_filename }}"
  when:
    - find_qpc_server_local.stat.exists == false
    - not quipucords_docker_image_present

- name: Obtain Quipucords server container image from GitHub
  get_url:
    url: "{{ quipucords_server_container_image_url }}"
    dest: "{{ pkg_install_dir }}"
    mode: 0644
    timeout: 300
  when:
    - find_qpc_server_local.stat.exists == false
    - not quipucords_docker_image_present

- name: Rename Quipucords server docker image to version specific cache name
  command: mv "{{ pkg_install_dir }}{{ github_server_filename }}" "{{qpc_server_local_path}}"
  when:
    - find_qpc_server_local.stat.exists == false
    - not quipucords_docker_image_present

- name: Default that docker load was not attempted for Quipucords server
  set_fact:
    load_quipucords_docker_server_attempted: false

- name: Default that docker load was not attempted for Postgres
  set_fact:
    load_docker_postgres_attempted: false

- name: Docker load was attempted for Quipucords server
  set_fact:
    load_quipucords_docker_server_attempted: true
  when:
    - not quipucords_docker_image_present

- name: Docker load was attempted for Postgres
  set_fact:
    load_docker_postgres_attempted: true
  when:
    - not postgres_docker_image_present
    - find_postgres_local_image.stat.exists == true

- name: Load Quipucords image into local Docker registry
  shell: docker load -i "{{qpc_server_local_path}}"
  become: true
  when:
    - not quipucords_docker_image_present

- name: Load Postgres image into local Docker registry
  shell: docker load -i "{{postgres_image_local_path}}"
  become: true
  when:
    - not postgres_docker_image_present
    - find_postgres_local_image.stat.exists == true

- name: Check for Quipucords server docker image presence
  shell: docker images | grep "{{ server_docker_image_name }}" | grep "{{ server_image_tag }}"
  become: true
  register: quipucords_docker_image_raw
  ignore_errors: yes
  when:
    load_quipucords_docker_server_attempted

- name: Check for Postgres docker image presence
  shell: docker images | grep postgres | grep "{{ POSTGRES_VERSION }}"
  become: true
  register: postgres_docker_image_raw
  ignore_errors: yes
  when:
    load_docker_postgres_attempted

- name: Set Quipucords docker image presence to false
  set_fact:
    quipucords_docker_image_present: false
  when:
    - load_quipucords_docker_server_attempted
    - quipucords_docker_image_raw.rc != 0

- name: Set Postgres docker image presence to false
  set_fact:
    postgres_docker_image_present: false
  when:
    - load_docker_postgres_attempted
    - postgres_docker_image_raw.rc != 0

- name: Set Quipucords docker image presence to true if output is not empty
  set_fact:
    quipucords_docker_image_present: "{{ quipucords_docker_image_raw['stdout_lines']|length > 0 }}"
  when:
    - load_quipucords_docker_server_attempted
    - server_image_tag != 'unknown'
    - quipucords_docker_image_raw.rc == 0
    - "'stdout_lines' in quipucords_docker_image_raw"

- name: Set Postgres docker image presence to true if output is not empty
  set_fact:
    postgres_docker_image_present: "{{ postgres_docker_image_raw['stdout_lines']|length > 0 }}"
  when:
    - load_docker_postgres_attempted
    - postgres_docker_image_raw.rc == 0
    - "'stdout_lines' in postgres_docker_image_raw"

- name: Make sure Quipucords server docker image loaded (it successfully loaded if skipped)
  fail:
    msg: "The Quipucord server's docker image was not found in the output of the docker images command."
  when:
    - load_quipucords_docker_server_attempted
    - not quipucords_docker_image_present

- name: Make sure Postgres docker image loaded (it successfully loaded if skipped)
  fail:
    msg: "The Postgres DB's docker image was not found in the output of the docker images command."
  when:
    - load_docker_postgres_attempted
    - not postgres_docker_image_present

- name: Make server home directory
  shell: mkdir -p "{{server_install_dir}}"

- name: Make server log directory
  shell: mkdir -p "{{server_install_dir}}/log"

- name: Make server sshkeys directory
  shell: mkdir -p "{{server_install_dir}}/sshkeys"

- name: Check for QPC server is already running
  shell: docker ps -a -f name="{{ server_name }}" | grep "{{server_name}}"
  become: true
  register: qpc_ps_raw
  ignore_errors: yes

- name: Remove running QPC server container
  shell: docker rm -f "{{server_name}}"
  become: true
  ignore_errors: yes
  when:
    - qpc_ps_raw['stdout_lines'] | length > 0

- name: Check if Postgres server already running
  shell: docker ps -a -f name="qpc-db" | grep "qpc-db"
  become: true
  register: postgres_ps_raw
  ignore_errors: yes

- name: Remove running Postgres server container
  shell: docker rm -f qpc-db
  become: true
  ignore_errors: yes
  when:
    - postgres_ps_raw['stdout_lines'] | length > 0

- name: Start Postgres container with docker volume (RHEL 6 & Centos 6)
  shell: docker run --name qpc-db  -e POSTGRES_USER="{{dbms_user}}" -e POSTGRES_PASSWORD="{{dbms_password}}" -v /var/lib/docker/volumes/qpc-data:/var/lib/postgresql/data -d postgres:"{{POSTGRES_VERSION}}"
  become: true
  when:
    - is_rhel_centos_6

- name: Start Postgres container with docker volume (RHEL 7, Centos 7)
  shell: docker run --name qpc-db  -e POSTGRES_USER="{{dbms_user}}" -e POSTGRES_PASSWORD="{{dbms_password}}" -v qpc-data:/var/lib/postgresql/data -d postgres:"{{POSTGRES_VERSION}}"
  become: true
  when:
    - is_rhel_centos_7

- name: Waiting for Postgres to spin up
  pause:
    seconds: 30

- name: Start Quipucords server linked to Postgres Docker container
  shell: docker run --name "{{ server_name }}" --link qpc-db:qpc-link -d -e USE_SUPERVISORD="{{ use_supervisord }}" -e QPC_SERVER_TIMEOUT="{{ server_http_timeout }}" -e QPC_DBMS_USER="{{ dbms_user }}" -e QPC_DBMS_PASSWORD="{{ dbms_password }}" -e QPC_DBMS_HOST="qpc-db" -e ANSIBLE_LOG_LEVEL="{{ ansible_log_level }}" -e NETWORK_CONNECT_JOB_TIMEOUT="{{ connect_job_timeout }}" -e NETWORK_INSPECT_JOB_TIMEOUT="{{ inspect_job_timeout }}" -p "{{ server_port }}":443 -v "{{ server_install_dir }}"/sshkeys:/sshkeys"{{ dir_mount_selinux }}" -v "{{ server_install_dir }}"/data:/var/data"{{ dir_mount_selinux }}" -v "{{ server_install_dir }}"/log:/var/log"{{ dir_mount_selinux }}" -i "{{ server_image_and_tag }}"
  become: true
